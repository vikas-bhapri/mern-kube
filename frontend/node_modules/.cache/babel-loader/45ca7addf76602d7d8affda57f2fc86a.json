{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PH447BN\\\\Downloads\\\\iNoteBook-main (1)\\\\iNoteBook-main\\\\frontend\\\\src\\\\Context\\\\Notes\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = 'http://localhost:3001';\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  const getNotes = async () => {\n    // API CALL\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  };\n\n  const addNote = async (title, description, tag) => {\n    // console.log(title, description, tag)\n    //TODO: API CALL\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); // console.log(JSON.stringify({title, description, tag}))\n\n    const json = await response.json();\n    console.log(json);\n    setNotes(notes.concat(json));\n  };\n\n  const deleteNote = async id => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json); //Logic to delete the note\n\n    console.log(\"Deleting the note with id\", id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  const editNote = async (id, title, description, tag) => {\n    console.log(id, title, description, tag);\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const editJson = response.json();\n    console.log(editJson); //const json = response.json()\n\n    let newNotes = JSON.parse(JSON.stringify(notes));\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","console","log","concat","deleteNote","id","newNotes","filter","note","_id","editNote","editJson","parse","index","length","element","children"],"sources":["C:/Users/PH447BN/Downloads/iNoteBook-main (1)/iNoteBook-main/frontend/src/Context/Notes/NoteState.js"],"sourcesContent":["import { useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\n\nconst NoteState = (props) => {\n  const host = 'http://localhost:3001'\n  const notesInitial = []\n  const [notes, setNotes] = useState(notesInitial)\n\n  const getNotes = async () => {\n    // API CALL\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json()\n    setNotes(json)\n  }\n\n  const addNote = async (title, description, tag) => {\n    // console.log(title, description, tag)\n    //TODO: API CALL\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({title, description, tag}) \n      \n    });\n    // console.log(JSON.stringify({title, description, tag}))\n    const json = await response.json()\n    console.log(json)\n    setNotes(notes.concat(json))\n\n  }\n\n  const deleteNote = async (id) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json()\n    console.log(json)\n\n    //Logic to delete the note\n    console.log(\"Deleting the note with id\", id);\n    const newNotes = notes.filter((note) => { return note._id !== id })\n    setNotes(newNotes)\n  }\n\n  const editNote = async (id, title, description, tag) => {\n    \n    console.log(id,title,description,tag)\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({title, description, tag}) \n    });\n    const editJson = response.json()\n    console.log(editJson)\n    //const json = response.json()\n    let newNotes = JSON.parse(JSON.stringify(notes))\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title\n        newNotes[index].description = description\n        newNotes[index].tag = tag\n        break\n      }\n    }\n    setNotes(newNotes)\n  }\n  return (\n    <NoteContext.Provider value={{ notes, setNotes, addNote, deleteNote, editNote, getNotes }}>\n      {props.children}\n    </NoteContext.Provider>\n  )\n}\n\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module"}